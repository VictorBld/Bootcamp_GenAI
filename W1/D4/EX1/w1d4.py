# -*- coding: utf-8 -*-
"""W1D4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eTLTNctoqsbdEecLChrKZEH-BS4fwOwp
"""

class Pets():
    def __init__(self, animals):
        self.animals = animals

    def walk(self):
        for animal in self.animals:
            print(animal.walk())

class Cat():
    is_lazy = True

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def walk(self):
        return f'{self.name} is just walking around'

class Bengal(Cat):
    def sing(self, sounds):
        return f'{sounds}'

class Chartreux(Cat):
    def sing(self, sounds):
        return f'{sounds}'

class Siamese(Cat):
    def sing(self, sounds):
        return f'{sounds}'

first_cat= Siamese("Félix",12)
second_cat= Bengal("Féline",10)
third_cat= Chartreux("Garfield",8)

all_cats=[first_cat,second_cat,third_cat]
sara_pets=Pets(all_cats)


sara_pets.walk()

class Dog():
    def __init__(self, name, age, weight):
      self.name= name
      self.age= age
      self.weight= weight

    def bark(self):
      return f'{self.name} is barking'

    def run_speed(self):
      speed= self.weight / self.age * 10
      return f'{self.name} has {speed} miles/hour speed'

    def fight(self, other_dog):
      power_un= self.weight * self.run_speed()
      power_other= other_dog.weight * other_dog.run_speed()
      if power_un > power_other:
        return f'{self.name} won the fight'
      else:
        return f'{other_dog.name} won the fight'


first_dog= Dog("Django", 12, 8)
second_dog=Dog("Jimmy", 7,10)
third_dog=Dog("Ralph", 10,15)

first_dog.bark()
first_dog.run_speed()
first_dog.fight(second_dog)
second_dog.fight(third_dog)

"""EX 3 CF W1D4bis"""

class Family():
  def __init__(self, last_name):
    self.members= []
    self.last_name= last_name

  def born(self,**kwargs):
    self.members.append(kwargs)
    print(f"Congratulations to the {self.last_name} family")

  def is_18(self,name):
    for member in self.members:
      if member["name"] == name:
        return member["age"] >= 18
    return False

  def family_presentation(self):
    print(f"Family Name: {self.last_name}")
    for member in self.members:
      print(f"  Name: {member['name']}, Age: {member['age']}, Gender: {member['gender']}, is_18 : {self.is_18(member['name'])}")


my_family = Family("Smith")
members = [
        {'name':'Michael','age':35,'gender':'Male','is_18':True},
        {'name':'Sarah','age':32,'gender':'Female','is_18':True}
    ]
my_family.members.append(members[0])
my_family.members.append(members[1])

new_born={'name':'John','age':1,'gender':'Male','is_18':False}
my_family.born(**new_born)

print(my_family.members)
my_family.family_presentation()